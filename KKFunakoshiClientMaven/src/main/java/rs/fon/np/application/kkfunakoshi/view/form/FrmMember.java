/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import static java.lang.String.format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.Belt;
import rs.fon.np.application.kkfunakoshi.domain.Category;
import rs.fon.np.application.kkfunakoshi.domain.City;
import rs.fon.np.application.kkfunakoshi.domain.Discipline;
import rs.fon.np.application.kkfunakoshi.domain.Gender;
import rs.fon.np.application.kkfunakoshi.domain.Member;
import rs.fon.np.application.kkfunakoshi.domain.MembershipFee;
import rs.fon.np.application.kkfunakoshi.validation.ValidationException;
import rs.fon.np.application.kkfunakoshi.validation.Validator;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MembershipFeeTableModel;

/**
 * Forma za dodavanje novog clana u sistem.
 * @author Jelena Repac
 */
public class FrmMember extends javax.swing.JDialog {

    
    /**
     * Clan 
     */
    Member member;
    /**
     * Datum uclanjenja
     */
    Date dateOfMembership= new Date();
    /**
     * Formator datuma
     */
    SimpleDateFormat format= new SimpleDateFormat("yyyy-MM-dd");
    /**
     * Konstruktor, kreira novi prozor FrmMember
     * @param parent forma iz koje je pozvana 
     * @param modal odredjuje da li dijalog treba da bude modalan ili ne 
     * @throws Exception Ukoliko dodje do greske
     */
    public FrmMember(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, modal);
        initComponents();
        
      
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        lblMemberId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblLastname = new javax.swing.JLabel();
        lblBirthday = new javax.swing.JLabel();
        lblMothersname = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblFathersName1 = new javax.swing.JLabel();
        lblAdress = new javax.swing.JLabel();
        lblBelt = new javax.swing.JLabel();
        lblDiscipline = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        txtMemberId = new javax.swing.JTextField();
        txtMemberName = new javax.swing.JTextField();
        txtMemberLastname = new javax.swing.JTextField();
        txtDateOfbirth = new javax.swing.JTextField();
        txtMothersname = new javax.swing.JTextField();
        txtFathersName = new javax.swing.JTextField();
        cbCity = new javax.swing.JComboBox<>();
        txtAdress = new javax.swing.JTextField();
        cbBelt = new javax.swing.JComboBox<>();
        cbDiscipline = new javax.swing.JComboBox<>();
        cbCategory = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMembershipFee = new javax.swing.JTable();
        jPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        btnAddMembershipFee = new javax.swing.JButton();
        lblAmount = new javax.swing.JLabel();
        lblDateMembershipError = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnSaveMember = new javax.swing.JButton();
        lblGender = new javax.swing.JLabel();
        cbGender = new javax.swing.JComboBox<>();
        lblMemberId1 = new javax.swing.JLabel();
        txtDateOfMembership = new javax.swing.JTextField();
        lblMemberId2 = new javax.swing.JLabel();
        txtDebt = new javax.swing.JTextField();
        lblNameError = new javax.swing.JLabel();
        lblMothersNameError = new javax.swing.JLabel();
        lblFathersNameError = new javax.swing.JLabel();
        lblDateError = new javax.swing.JLabel();
        lblLastnameError = new javax.swing.JLabel();
        lblPhoto = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblMemberId.setText("Id:");

        lblName.setText("Name:");

        lblLastname.setText("Lastname:");

        lblBirthday.setText("Date of birth:");

        lblMothersname.setText("Mothers name:");

        lblCity.setText("City");

        lblFathersName1.setText("Fathers name:");

        lblAdress.setText("Adress:");

        lblBelt.setText("Belt: ");

        lblDiscipline.setText("Discipline:");

        lblCategory.setText("Category:");

        txtMemberId.setEditable(false);
        txtMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIdActionPerformed(evt);
            }
        });

        txtMemberName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMemberNameKeyTyped(evt);
            }
        });

        txtMemberLastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMemberLastnameKeyTyped(evt);
            }
        });

        txtDateOfbirth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDateOfbirthKeyTyped(evt);
            }
        });

        txtMothersname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMothersnameKeyTyped(evt);
            }
        });

        txtFathersName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFathersNameKeyTyped(evt);
            }
        });

        tblMembershipFee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMembershipFee.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblMembershipFee);

        jPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Membership Fee"));

        jLabel5.setText("Date:");

        jLabel6.setText("Amount:");

        txtDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDateKeyTyped(evt);
            }
        });

        txtAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmountKeyTyped(evt);
            }
        });

        btnAddMembershipFee.setText("Add");
        btnAddMembershipFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMembershipFeeActionPerformed(evt);
            }
        });

        lblAmount.setForeground(new java.awt.Color(255, 0, 0));
        lblAmount.setText("Error message amount");

        lblDateMembershipError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateMembershipError.setText("Error date ");

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(102, 102, 102)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(txtAmount)
                    .addComponent(lblDateMembershipError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddMembershipFee, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        jPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAmount, txtDate});

        jPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel5, jLabel6});

        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddMembershipFee, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(lblDateMembershipError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAmount))
        );

        jPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAmount, txtDate});

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSaveMember.setText("Save member");
        btnSaveMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMemberActionPerformed(evt);
            }
        });

        lblGender.setText("Gender:");

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblMemberId1.setText("Debt:");

        txtDateOfMembership.setEditable(false);

        lblMemberId2.setText("Date of membership:");

        txtDebt.setEditable(false);
        txtDebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDebtActionPerformed(evt);
            }
        });

        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("Error message name");

        lblMothersNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblMothersNameError.setText("Error message mothers name");

        lblFathersNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFathersNameError.setText("Error message fathers name");

        lblDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateError.setText("Error message date of birth");

        lblLastnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLastnameError.setText("Error message lastname");

        lblPhoto.setPreferredSize(new java.awt.Dimension(35, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFathersName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDiscipline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBelt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAdress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(lblMothersname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLastname, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(lblMemberId, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBelt, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFathersName, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMothersname, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDateOfbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMemberLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addComponent(lblMothersNameError, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addComponent(lblFathersNameError, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addComponent(lblLastnameError, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addComponent(lblDateError, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSaveMember)
                        .addGap(541, 541, 541))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblMemberId1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtDebt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblMemberId2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtDateOfMembership, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAdress, lblBelt, lblBirthday, lblCategory, lblCity, lblDiscipline, lblFathersName1, lblLastname, lblMemberId, lblMothersname, lblName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbBelt, cbCategory, cbCity, cbDiscipline, cbGender, txtAdress, txtDateOfbirth, txtFathersName, txtMemberId, txtMemberLastname, txtMemberName, txtMothersname});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDateOfMembership, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMemberId2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNameError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastname)
                            .addComponent(txtMemberLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLastnameError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGender, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDateOfbirth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBirthday, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDateError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMothersname)
                            .addComponent(txtMothersname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtDebt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMemberId1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMothersNameError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFathersName1)
                            .addComponent(txtFathersName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFathersNameError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAdress))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBelt)
                            .addComponent(cbBelt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDiscipline)
                            .addComponent(cbDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCategory)
                            .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveMember)))
                    .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel.getAccessibleContext().setAccessibleName("");
        jPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIdActionPerformed

    /**
     * Obradjuje dogadjaj kada se pritisne dugme AddMembershipFee.
     * Dodaje clanarinu u tabelu. 
     * Ukoliko je unet iznos clanarine manji ili jednak nuli postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnAddMembershipFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMembershipFeeActionPerformed
        try {
            
            if(Double.parseDouble(txtAmount.getText())<=0 || txtAmount.getText().equals("")){
                lblAmount.setText("Amount of membership fee can't be null, zero or less than zero!");
                
            }
            else{
                validateMembershipFee();
                MembershipFee membershipFee= new MembershipFee();
                Double amount=Double.parseDouble(getTxtAmount().getText());
                
                MembershipFeeTableModel model= (MembershipFeeTableModel) tblMembershipFee.getModel();
                String dateMf= txtDate.getText().trim();
                Date date= format.parse(dateMf);
                

                membershipFee.setAmount(amount);
                membershipFee.setDate(date);
                membershipFee.setMember(member);
                if(!model.exists(membershipFee)){
                    model.addMembershipFee(membershipFee);

                    txtAmount.setText("3000.00");
                    txtDate.setText(null);
                    txtDebt.setText("0.00");
                    lblAmount.setText(null);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Membership fee for that month is paid!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ValidationException ex) {
           JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnAddMembershipFeeActionPerformed

    /**
     * Obradjuje dogadjaj kada se pritisne dugme Delete.
     * Brise konkretnu clanarinu clana iz tabele.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       MembershipFeeTableModel model= (MembershipFeeTableModel) tblMembershipFee.getModel();
       int row= tblMembershipFee.getSelectedRow();
       if(row<0){
            JOptionPane.showMessageDialog(this, "You havent selected any row");
       }
       else{
           model.deleteMembershipFee(row);
           txtDebt.setText("3000.00");
       }
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Save.
     * Cuva clana u sistemu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnSaveMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMemberActionPerformed
        
        try {
            validateInput();
            String name=txtMemberName.getText().trim();
            String lastname=txtMemberLastname.getText().trim();
            String fathersName=txtFathersName.getText().trim();
            String mothersName=txtMothersname.getText().trim();
            
            String dateB= txtDateOfbirth.getText().trim();
            Date birthday=format.parse(dateB);
            Date currentDate= new Date();
            if(birthday.after(currentDate)){
                JOptionPane.showMessageDialog(this, "Date of birth can not be after current date!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String adress=txtAdress.getText().trim();
            
            Belt belt= (Belt) cbBelt.getSelectedItem();
            Discipline discipline=(Discipline) cbDiscipline.getSelectedItem();
            Category category=(Category) cbCategory.getSelectedItem();
            City city= (City) cbCity.getSelectedItem();
            Gender gender= (Gender) cbGender.getSelectedItem();
            Double totalDebt=Double.parseDouble(txtDebt.getText().trim());
            
          
             member= new Member(name, lastname,gender, birthday, mothersName,
                    fathersName, city, belt, Long.parseLong("0"), discipline, category,
                    adress, 0L,0L,0L,new ArrayList<MembershipFee>(),dateOfMembership,totalDebt);
             
            MembershipFeeTableModel model= (MembershipFeeTableModel) tblMembershipFee.getModel();
            List<MembershipFee> membershipFees= model.getMembershipFees();
            for(MembershipFee mf: membershipFees){
                mf.setMember(member);
            }
            
            member= new Member(name, lastname,gender, birthday, mothersName,
                    fathersName, city, belt, Long.parseLong("0"), discipline, category,
                    adress, 0L,0L,0L,membershipFees,dateOfMembership,totalDebt);
            
            
           ControllerUI.getInstance().addMember(member);
           JOptionPane.showMessageDialog(this, "You have successffully added new member!");
           int answer=JOptionPane.showConfirmDialog(this, "Do you want to add more members?");
           if(answer==0){
               clearFields();
           }
           else{
                this.dispose();
           }
           
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSaveMemberActionPerformed

    private void txtDebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDebtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDebtActionPerformed
    /**
     * Obradjuje dogadjaj kada se unosi datum rodjenja clana.
     * Ukoliko datum nije odgovarajuceg formata, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtDateOfbirthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateOfbirthKeyTyped
         try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.parse(txtDateOfbirth.getText());
            lblDateError.setText(null);
        } catch (ParseException ex) {
            lblDateError.setText("Date must be in format yyyy-MM-dd!");
        }
    }//GEN-LAST:event_txtDateOfbirthKeyTyped
    /**
     * Obradjuje dogadjaj kada se unosi ime majke clana.
     * Ukoliko je duzina imena majke manja od 2 karaktera, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtMothersnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMothersnameKeyTyped
        if(txtMothersname.getText().length()<2){
            lblMothersNameError.setText("The mothers name must contain at least 2 letters");
        }else{
        lblMothersNameError.setText(null);
        }
    }//GEN-LAST:event_txtMothersnameKeyTyped
    /**
     * Obradjuje dogadjaj kada se unosi ime oca clana.
     * Ukoliko je duzina imena oca manja od 2 karaktera, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtFathersNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFathersNameKeyTyped
        if(txtFathersName.getText().length()<2){
            lblFathersNameError.setText("The fathers name must contain at least 2 letters");
        }else{
        lblFathersNameError.setText(null);
        }
    }//GEN-LAST:event_txtFathersNameKeyTyped
    /**
     * Obradjuje dogadjaj kada se unosi ime clana.
     * Ukoliko je duzina imena manja od 2 karaktera, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtMemberNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemberNameKeyTyped
        if(txtMemberName.getText().length()<2){
            lblNameError.setText("The member name must contain at least 2 letters");
        }else{
        lblNameError.setText(null);
        }
    }//GEN-LAST:event_txtMemberNameKeyTyped
    /**
     * Obradjuje dogadjaj kada se unosi prezime clana.
     * Ukoliko je duzina prezimena manja od 2 karaktera, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtMemberLastnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemberLastnameKeyTyped
        if(txtMemberLastname.getText().length()<2){
            lblLastnameError.setText("The member lastname must contain at least 2 letters");
        }else{
        lblLastnameError.setText(null);
        }
    }//GEN-LAST:event_txtMemberLastnameKeyTyped
    /**
     * Obradjuje dogadjaj kada se iznos clanarine.
     * Ukoliko je uneti iznos jednak nuli ili negativan broj, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyTyped
        if(txtAmount.getText().contains("-")){
            lblAmount.setText("Amount of membership fee can't be zero or less than zero!");
        }
        else{
            lblAmount.setText(null);
        }
    }//GEN-LAST:event_txtAmountKeyTyped

    /**
     * Obradjuje dogadjaj kada se unosi datum uclanjenja clana u karate klub.
     * Ukoliko datum nije odgovarajuceg formata, postavlja se poruka o gresci u labelu.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void txtDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateKeyTyped
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.parse(txtDate.getText());
            lblDateMembershipError.setText(null);
        } catch (ParseException ex) {
            lblDateMembershipError.setText("Date must be in format yyyy-MM-dd!");
        }
    }//GEN-LAST:event_txtDateKeyTyped

   /**
    * Vraca objekat JTextField.
    * @return JTextField
    */
    public javax.swing.JTextField getTxtAmount() {
		return txtAmount;
	}

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMembershipFee;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveMember;
    private javax.swing.JComboBox<Object> cbBelt;
    private javax.swing.JComboBox<Object> cbCategory;
    private javax.swing.JComboBox<Object> cbCity;
    private javax.swing.JComboBox<Object> cbDiscipline;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAdress;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblBelt;
    private javax.swing.JLabel lblBirthday;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JLabel lblDateMembershipError;
    private javax.swing.JLabel lblDiscipline;
    private javax.swing.JLabel lblFathersName1;
    private javax.swing.JLabel lblFathersNameError;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLastname;
    private javax.swing.JLabel lblLastnameError;
    private javax.swing.JLabel lblMemberId;
    private javax.swing.JLabel lblMemberId1;
    private javax.swing.JLabel lblMemberId2;
    private javax.swing.JLabel lblMothersNameError;
    private javax.swing.JLabel lblMothersname;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTable tblMembershipFee;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDateOfMembership;
    private javax.swing.JTextField txtDateOfbirth;
    private javax.swing.JTextField txtDebt;
    private javax.swing.JTextField txtFathersName;
    private javax.swing.JTextField txtMemberId;
    private javax.swing.JTextField txtMemberLastname;
    private javax.swing.JTextField txtMemberName;
    private javax.swing.JTextField txtMothersname;
    // End of variables declaration//GEN-END:variables

    /**
     * Priprema prikaza forme.
     * Formatiraju se tabele, postavlja se logo i pripremaju se sva polja.
     * @throws Exception Ukoliko se desi greska pri ucitavanju gradova ili clanarina iz sistema.
     */
    private void prepareView() throws Exception {
        load();
        loadCities();
        loadMembershipFees();
        formatTable();
        prepareFields();
        setLogo();
    }
    /**
     * Postavlja pocetne vrednosti polja forme.
     */
    private void load() {
        cbBelt.setModel(new DefaultComboBoxModel<Object>(Belt.values()));
        cbCategory.setModel(new DefaultComboBoxModel<Object>(Category.values()));
        cbDiscipline.setModel(new DefaultComboBoxModel<Object>(Discipline.values()));
        cbGender.setModel(new DefaultComboBoxModel(Gender.values()));
    }
    /**
     * Setuje model za tabelu za prikaz svih clanarina koji sadrzi listu svih clanarina clana iz baze.
     * @throws Exception Ukoliko se desi greska prilikom ucitavanja clanarina iz baze
     */
    private List<MembershipFee> loadMembershipFees() throws Exception {
       List<MembershipFee> membershipFees= ControllerUI.getInstance().getMembershipFees();
       return membershipFees;
    }

    /**
     * Setovanje modela za tabelu koja sadrzi sve clanarine.
     */
    private void formatTable(){
        List<MembershipFee> mf=new ArrayList<>();
        MembershipFeeTableModel model= new MembershipFeeTableModel(mf);
        tblMembershipFee.setModel(model);
    }
    /**
     * Ucitava gradove iz baze i postavlja ih u formu, JComboBox.
     * 
     * @throws Exception Ukoliko dodje do greske prilikom citanja gradova iz baze
     */
    private void loadCities() throws Exception {
       List<City> cities= ControllerUI.getInstance().getCities();
       cbCity.setModel(new DefaultComboBoxModel<Object>(cities.toArray()));
    }

    /**
     * Resetuje polja forme.
     */
    private void clearFields() {
        txtMemberName.setText(null);
        txtMemberLastname.setText(null);
        txtMothersname.setText(null);
        txtFathersName.setText(null);
        txtDateOfbirth.setText(null);
        txtAdress.setText(null);
        cbBelt.setSelectedItem(null);
        cbCategory.setSelectedItem(null);
        cbCity.setSelectedItem(null);
        cbDiscipline.setSelectedItem(null);
        cbGender.setSelectedItem(null);
        tblMembershipFee.setModel(new MembershipFeeTableModel(new ArrayList<MembershipFee>()));
        
    }

    /**
     * Priprema polja forme za novi unos.
     */
    private void prepareFields() {
        cbBelt.setSelectedItem(null);
        cbCity.setSelectedItem(null);
        cbCategory.setSelectedItem(null);
        cbDiscipline.setSelectedItem(null);
        cbGender.setSelectedItem(null);
        
        lblAmount.setText(null);
        lblNameError.setText(null);
        lblMothersNameError.setText(null);
        lblFathersNameError.setText(null);
        lblDateError.setText(null);
        lblNameError.setText(null);
        lblLastnameError.setText(null);
        lblDateMembershipError.setText(null);
        
        txtAmount.setText("3000.00");
        txtDate.setText(format.format(dateOfMembership));
        txtDebt.setText("3000.00");
        txtDateOfMembership.setText(format.format(dateOfMembership));
    }
    /**
     * Vrsi validaciju korisnickog unosa za informacije koje su vezane za licne informacije clana.
     * Koristi Validator klasu za proveru i generisanje odgovarajuce poruke o gresci.
     * 
     * @throws ValidationException Ukoliko postoji neka greška u unosu
     */
    private void validateInput() throws ValidationException {
        Validator.startValidation().validateNotNullOrEmpty(txtMemberName.getText(), "You didn't insert member's name!").
               validateNotNullOrEmpty(txtMemberLastname.getText(), "You didn't insert member's lastname!").
               validateNotNullOrEmpty(txtAdress.getText(), "You didn't insert member's adress!").
               validateNotNullOrEmpty(txtMothersname.getText(), "You didn't insert mothers name!").
               validateNotNullOrEmpty(txtFathersName.getText(), "You didn't insert fathers name!").
               validateValueIsDate(txtDateOfbirth.getText(), "yyyy-MM-dd", "Date must be in the format yyyy-MM-dd!").
               validateNotNull(cbBelt.getSelectedItem(),"You didn't choose a belt!").
               validateNotNull(cbCategory.getSelectedItem(),"You didn't choose a category!").
               validateNotNull(cbCity.getSelectedItem(),"You didn't choose a city!").
               validateNotNull(cbDiscipline.getSelectedItem(),"You didn't choose a discipline!").
               validateNotNull(cbGender.getSelectedItem(),"You didn't choose a gender!").throwIfInvalide();
    }

    /**
     * Postavlja logo na formu.
     */
    private void setLogo() {
          ImageIcon img = new ImageIcon("logoIcon.png");
         lblPhoto.setIcon(img);
    }

    /**
     *  
     * Vrsi validaciju korisnickog unosa za informacije koje su vezane za clanarinu clana.
     * Koristi Validator klasu za proveru i generisanje odgovarajuce poruke o gresci.
     * 
     * @throws ValidationException Ukoliko postoji neka greška u unosu
     *
     */
    private void validateMembershipFee() throws ValidationException {
        Validator.startValidation().validateNotNullOrEmpty(txtAmount.getText(), "Amount can't be null!").
                validateValueIsDate(txtDate.getText() ,"yyyy-MM-dd", "Date must be in the format yyyy-MM-dd").throwIfInvalide();
    }

    

   
}
