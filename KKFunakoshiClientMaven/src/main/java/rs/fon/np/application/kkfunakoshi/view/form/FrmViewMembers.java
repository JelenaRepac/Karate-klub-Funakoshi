/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import java.util.List;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.Belt;
import rs.fon.np.application.kkfunakoshi.domain.Category;
import rs.fon.np.application.kkfunakoshi.domain.Discipline;
import rs.fon.np.application.kkfunakoshi.domain.Member;
import rs.fon.np.application.kkfunakoshi.validation.ValidationException;
import rs.fon.np.application.kkfunakoshi.validation.Validator;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MemberTableModel;

/**
 * Predstavlja formu za prikaz svih clanova.
 * @author Jelena Repac
 */
public class FrmViewMembers extends javax.swing.JDialog {

    /**
     * Konstruktor
     * @param parent forma iz koje je pozvana 
     * @param modal odredjuje da li dijalog treba da bude modalan ili ne 
     */
    public FrmViewMembers(java.awt.Frame parent, boolean modal){
        super(parent, modal);
        
        initComponents();
        setTitle("Members");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        try {
            prepareView();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Gre≈°ka pri inicijalizaciji" + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMember = new javax.swing.JTable();
        btnDetails = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbDiscipline = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbBelt = new javax.swing.JComboBox<>();
        btnShowAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        btnSearchNameYear = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMember.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblMember);

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by name and lastname:");

        jLabel2.setText("Search by discipline:");

        cbDiscipline.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Search by category:");

        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Search by belts:");

        cbBelt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnShowAll.setText("Show all members");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Search by birth year: ");

        btnReset.setText("Reset search");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSBelts1ActionPerformed(evt);
            }
        });

        btnSearchNameYear.setText("Search");
        btnSearchNameYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameYearActionPerformed(evt);
            }
        });

        lblPhoto.setPreferredSize(new java.awt.Dimension(35, 16));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbBelt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbDiscipline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearchNameYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14)
                        .addComponent(btnReset)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnShowAll, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(btnDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnReset, btnSearch});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(btnSearchNameYear))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbBelt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnShowAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetails)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obradjuje dogadjaj kada se pritisne dugme Details.
     * Na osnovu selektovanog reda, clan se prikazuje u novom prozoru.
     * Ukoliko red nije selektovan ili prozor sa informacijama o clanu ne moze da se prikaze, prikazuje se prozor sa porukom o gresci.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        try {
            int selectedRow= tblMember.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a member!");
                return;
            }
            
            Member m= ((MemberTableModel) tblMember.getModel()).getMember(selectedRow);
            
            FrmLoadMember frm= new FrmLoadMember((Frame) this.getParent(),true,m);
            frm.setTableMember(tblMember);
            frm.setVisible(true);
            
            MemberTableModel model= (MemberTableModel) tblMember.getModel();
            
            model.refreshView();
           } catch (Exception ex) {
              JOptionPane.showMessageDialog(this, "System can't load selected member!","Error",JOptionPane.ERROR_MESSAGE);
           }

       
       
       
    }//GEN-LAST:event_btnDetailsActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Show all members.
     * Poziva se metoda koja povlaci sve clanove karate kluba iz baze.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed
        try {
            formatTable();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnShowAllActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Search.
     * Pretrazuje clanove na osnovu unetih parametara.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String query = buildQuery();
        if (query == null) {
            return;
        }
        try {
            List<Member> members = (List<Member>) ControllerUI.getInstance().getByQuery(query);
            if (members.size() != 0) {
                JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
            } else {
                JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            ((MemberTableModel) tblMember.getModel()).setMembers(members);
            cbDiscipline.setSelectedItem(null);
            cbBelt.setSelectedItem(null);
            cbCategory.setSelectedItem(null);
        } catch (Exception ex) {
            Logger.getLogger(FrmViewMembers.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Kreira upit na osnovu unetih parametara od strane korisnika.
     * @return string upit za pretrazivanje clanova
     */
    private String buildQuery() {
        String name = txtName.getText();
        String date = txtDate.getText();
        Discipline discipline = (Discipline) cbDiscipline.getSelectedItem();
        Belt belt = (Belt) cbBelt.getSelectedItem();
        Category category = (Category) cbCategory.getSelectedItem();

        if (!name.isEmpty() || !date.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You cannot search by name or date!");
            return null;
        }

        String query = "WHERE ";
        if (discipline != null) {
            query += "discipline='" + discipline + "' AND ";
        }
        if (belt != null) {
            query += "belt='" + belt + "' AND ";
        }
        if (category != null) {
            query += "category='" + category + "' AND ";
        }
        if (query.equals("WHERE ")) {
            JOptionPane.showMessageDialog(this, "You must select either discipline, belt or category for search!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        query = query.substring(0, query.length() - 5); 
        System.out.println(query);
        return query;
    }
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Reset search.
     * Postavlja pocetne vrednosti na polja za unos podataka.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnSBelts1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSBelts1ActionPerformed
        txtDate.setText(null);
        txtName.setText(null);
        cbBelt.setSelectedItem(null);
        cbCategory.setSelectedItem(null);
        cbDiscipline.setSelectedItem(null);
    }//GEN-LAST:event_btnSBelts1ActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Search.
     * Pretrazuje clanove na osnovu unetih parametara.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnSearchNameYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameYearActionPerformed
        if(!txtName.getText().isEmpty() && txtDate.getText().isEmpty()){
            searchByName();
            return;
        }
        else if(txtName.getText().isEmpty() && !txtDate.getText().isEmpty()){
            searchByBirthYear();
            return;
        }
        
            String n= txtName.getText().trim();
            if(n.contains(" ")){
            try {
                String ime[]= n.split(" ");
                String name= ime[0];
                String lastname=ime[1];       
                String date= txtDate.getText().trim();

                String query="WHERE ";
                if(!name.isEmpty() && !lastname.isEmpty()){
                    String qName=" m.name='"+name+"'"+" AND m.lastname='"+lastname+"'";
                    query=query+qName+" AND";
                }
                if(!date.isEmpty()){
                    String qYear =" year(m.dateOfBirth)="+Integer.parseInt(date);
                    query=query+qYear;
                    
                }
                System.out.println(query);
                
                List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                txtDate.setText(null);
                txtName.setText(null);
            } catch (Exception ex) {
                Logger.getLogger(FrmViewMembers.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
    }//GEN-LAST:event_btnSearchNameYearActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchNameYear;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JComboBox<String> cbBelt;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JComboBox<String> cbDiscipline;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTable tblMember;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    /**
     * Priprema prikaza forme.
     * @throws Exception Ukoliko se desi greska pri ucitavanju gradova iz sistema.
     */
    private void prepareView() throws Exception {
        MemberTableModel model= new MemberTableModel(new ArrayList<Member>());
        tblMember.setModel(model);
        cbBelt.setModel(new DefaultComboBoxModel(Belt.values()));
        cbCategory.setModel(new DefaultComboBoxModel(Category.values()));
        cbDiscipline.setModel(new DefaultComboBoxModel(Discipline.values()));
        cbBelt.setSelectedItem(null);
        cbCategory.setSelectedItem(null);
        cbDiscipline.setSelectedItem(null);
        ImageIcon img = new ImageIcon("logoIcon.png");
        lblPhoto.setIcon(img);
    }

    /**
     * Ucitava clanove iz baze.
     * @return lista clanova
     * @throws Exception Ukoliko se desi greska pri ucitavanju clanova iz sistema.
     */
    private List<Member> loadMembers() throws Exception {
       List<Member> members= ControllerUI.getInstance().getByQuery("");
       return members;
    }
    /**
     * Postavljaju se clanovi u tabelu.
     * @throws Exception Ukoliko se desi greska pri ucitavanju clanova iz sistema.
     */
    private void formatTable() throws Exception {
        List<Member> members= loadMembers();
        MemberTableModel model= new MemberTableModel(members);
        if(members.size()!=0){
           JOptionPane.showMessageDialog(this, "The system found members!");
        }else{
           JOptionPane.showMessageDialog(this, "The system cannot find members!","Error",JOptionPane.ERROR_MESSAGE);
        }
        tblMember.setModel(model);
    }
    /**
     * Vrsi validaciju korisnickog unosa, konkretno za ime clana.
     * Koristi Validator klasu za proveru i generisanje odgovarajuce poruke o gresci.
     * 
     * @throws ValidationException Ukoliko postoji neka gre≈°ka u unosu
     */
    private void validateInput() throws ValidationException {
         Validator.startValidation().validateNotNullOrEmpty(txtName.getText(),"Insert value for search!").throwIfInvalide();
 
    }
    /**
     * Vrsi validaciju korisnickog unosa, konkretno za datum rodjenja.
     * Koristi Validator klasu za proveru i generisanje odgovarajuce poruke o gresci.
     * 
     * @throws ValidationException Ukoliko postoji neka gre≈°ka u unosu
     */
    private void validateYear() throws ValidationException {
       Validator.startValidation().validateNotNull(txtDate.getText(), "You must insert a year for search!").
                validateValueIsNumber(txtDate.getText(), "Inserted value is not year!").throwIfInvalide();
    }

    /**
     * Trazi clanove prema imenu i prezimenu. 
     * Ukoliko postoje clanovi sa tim imenom i prezimenom, prikazuje poruku o uspjehu i azurira tablicu clanova s rezultatima pretrazivanja. 
     * Ukoliko ne postoje, pokazuje se poruka o gresci.
     */
    private void searchByName() {
         try{
            validateInput();
            String n= txtName.getText().trim();
            if(n.contains(" ")){
                String ime[]= n.split(" ");
                String name= ime[0];
                String lastname=ime[1];
                String query = " WHERE m.name='"+name+"'"+"AND m.lastname='"+lastname+"'";
                List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                cbDiscipline.setSelectedItem(null);
                txtName.setText(null);
            }
            else{
                JOptionPane.showMessageDialog(this, "You must insert name and lastname!");
            }
            
       }catch(IndexOutOfBoundsException ex){
           JOptionPane.showMessageDialog(this,"You must enter name and lastname!","Error",JOptionPane.ERROR_MESSAGE);
           
       }catch(Exception e){
           JOptionPane.showMessageDialog(this, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
           e.printStackTrace();
           
       }
    }
    /**
     * Trazi clanove prema godini rodjenja.
     * Ukoliko postoje clanovi sa tom godinom rodjenja, prikazuje poruku o uspjehu i azurira tablicu clanova s rezultatima pretrazivanja. 
     * Ukoliko ne postoje, pokazuje se poruka o gresci.
     */
    private void searchByBirthYear() {
        try{
            validateYear();
            String n= txtDate.getText().trim();
           
            String query = " WHERE year(m.dateOfBirth)="+Integer.parseInt(n);
                List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members born in "+n);
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members born in "+n,"Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                cbDiscipline.setSelectedItem(null);
                txtName.setText(null);
       }catch(IndexOutOfBoundsException ex){
           JOptionPane.showMessageDialog(this,"You must year of birth!","Error",JOptionPane.ERROR_MESSAGE);
           
       }catch(Exception e){
           JOptionPane.showMessageDialog(this, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
           e.printStackTrace();
           
       } 
    }
    /**
     * Trazi clanove prema disciplini u kojoj se takmice.
     * Ukoliko postoje clanovi koji se takmice u izabranoj disciplini, prikazuje poruku o uspjehu i azurira tablicu clanova s rezultatima pretrazivanja. 
     * Ukoliko ne postoje, pokazuje se poruka o gresci.
     */
    private void searchByDiscipline() {
       Discipline discipline= (Discipline) cbDiscipline.getSelectedItem();
            try{
                //String queey="SELECT * FROM member WHERE discpline=" + discipline;
                String query = " WHERE discipline='"+discipline+"'";
                List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                cbDiscipline.setSelectedItem(null);
           }catch(Exception ex){
               JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
               ex.printStackTrace();
           }
    }
    /**
     * Trazi clanove prema pojasu.
     * Ukoliko postoje clanovi koji imaju izabrani pojas, prikazuje poruku o uspjehu i azurira tablicu clanova s rezultatima pretrazivanja. 
     * Ukoliko ne postoje, pokazuje se poruka o gresci.
     */
    private void searchByBelt() {
        Belt belt= (Belt) cbBelt.getSelectedItem();
            try {
                String query=" WHERE belt='"+belt+"'";
                 List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                cbBelt.setSelectedItem(null);
            }catch(Exception ex){
               JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
               ex.printStackTrace();
            }
    }
    /**
     * Trazi clanove prema kategoriji u kojoj se takmice.
     * Ukoliko postoje clanovi koji se takmice u izabranoj kategoriji, prikazuje poruku o uspjehu i azurira tablicu clanova s rezultatima pretrazivanja. 
     * Ukoliko ne postoje, pokazuje se poruka o gresci.
     */
    private void searchByCategory() {
        Category category=(Category) cbCategory.getSelectedItem();
            try{
                //String queey="SELECT * FROM member WHERE discpline=" + discipline;
                String query = " WHERE category='"+category+"'";
                List<Member> members= (List<Member>) ControllerUI.getInstance().getByQuery(query);
                if(members.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found members at the specified value!");
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find members by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                ((MemberTableModel) tblMember.getModel()).setMembers(members);
                cbCategory.setSelectedItem(null);
           }catch(Exception ex){
               JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
               ex.printStackTrace();
           }

    }
}