/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.Category;
import rs.fon.np.application.kkfunakoshi.domain.Competition;
import rs.fon.np.application.kkfunakoshi.domain.Medal;
import rs.fon.np.application.kkfunakoshi.domain.Member;
import rs.fon.np.application.kkfunakoshi.domain.Result;
import rs.fon.np.application.kkfunakoshi.domain.Team;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.CompetitionTableModel;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MemberTableModel;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MemberTableModelSimpler;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.ResultTableModel;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.TeamTableModel;

/**
 *
 * @author Jeks
 */
public class FrmCompetitionResult extends javax.swing.JDialog {

    /**
     * Creates new form FrmResult
     */
    Competition c=null;
    ButtonGroup groupTeam= new ButtonGroup();
    ButtonGroup groupMember= new ButtonGroup();
    public FrmCompetitionResult(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        try {
            prepareView();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Initialization error.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnChooseCompetition = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCompetitions = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMembers = new javax.swing.JTable();
        btnGold1 = new javax.swing.JRadioButton();
        btnSilver1 = new javax.swing.JRadioButton();
        btnBronze1 = new javax.swing.JRadioButton();
        btnAddResultMember = new javax.swing.JButton();
        cbCategory = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTeams = new javax.swing.JTable();
        btnGold2 = new javax.swing.JRadioButton();
        btnSilver2 = new javax.swing.JRadioButton();
        btnBronze2 = new javax.swing.JRadioButton();
        btnAddResultTeam = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtCompetition = new javax.swing.JTextField();
        lblPhoto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Competition"));

        btnChooseCompetition.setText("Choose competition");
        btnChooseCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseCompetitionActionPerformed(evt);
            }
        });

        tblCompetitions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCompetitions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(tblCompetitions);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChooseCompetition)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseCompetition))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Members"));

        tblMembers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMembers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMembers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMembersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMembers);

        btnGold1.setText("Gold ");

        btnSilver1.setText("Silver");

        btnBronze1.setText("Bronze");
        btnBronze1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBronze1ActionPerformed(evt);
            }
        });

        btnAddResultMember.setText("Add result");
        btnAddResultMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResultMemberActionPerformed(evt);
            }
        });

        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGold1)
                    .addComponent(btnSilver1)
                    .addComponent(btnBronze1)
                    .addComponent(btnAddResultMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBronze1, btnGold1, btnSilver1});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnGold1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSilver1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBronze1)
                        .addGap(7, 7, 7)
                        .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddResultMember))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));

        tblTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTeams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTeams.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTeamsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTeams);

        btnGold2.setText("Gold ");

        btnSilver2.setText("Silver");

        btnBronze2.setText("Bronze");
        btnBronze2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBronze2ActionPerformed(evt);
            }
        });

        btnAddResultTeam.setText("Add result");
        btnAddResultTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResultTeamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1)
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGold2)
                    .addComponent(btnSilver2)
                    .addComponent(btnBronze2)
                    .addComponent(btnAddResultTeam))
                .addGap(6, 6, 6))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnGold2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSilver2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBronze2)
                        .addGap(43, 43, 43)
                        .addComponent(btnAddResultTeam))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblResult);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete result");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        txtCompetition.setEditable(false);
        txtCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCompetitionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 100, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseCompetitionActionPerformed
       int selectedRow= tblCompetitions.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a competition!");
                return;
            }
            CompetitionTableModel model=(CompetitionTableModel) tblCompetitions.getModel();
            Competition competition= model.getCompetition(selectedRow);
            c=competition;
            tblCompetitions.setEnabled(false);
            btnChooseCompetition.setEnabled(false);
            txtCompetition.setText(competition.toString());
            tblCompetitions.clearSelection();
    }//GEN-LAST:event_btnChooseCompetitionActionPerformed

    private void btnBronze2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBronze2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBronze2ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            ResultTableModel model= (ResultTableModel) tblResult.getModel();
            List<Result> results=model.getResults();
            
            for(Result r: results){
                if(r.getMember()!=null){
                updateMedalsMember(r,r.getMember());
                }
                if(r.getTeam()!=null){
                updateMedalsTeam(r, r.getTeam());
                }
                ControllerUI.getInstance().addResult(r);
                refreshView();
            }
            JOptionPane.showMessageDialog(this, "Results inserted successfully!");
            int answer=JOptionPane.showConfirmDialog(this, "Do you want to add more results?");
            if(answer!=0){
                this.dispose();
            }
            
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            refreshView();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddResultMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResultMemberActionPerformed
        int selectedRow= tblMembers.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a member!");
                return;
            }
            MemberTableModelSimpler model= (MemberTableModelSimpler) tblMembers.getModel();
            Member member= model.getMember(selectedRow);
            Medal medals;
            Result result= new Result();
            
            Category category=(Category) cbCategory.getSelectedItem();
            if(category==null){
                JOptionPane.showMessageDialog(this, "You must select a category!");
                return;
            }
            else{
                if(btnGold1.isSelected()){
                    medals=Medal.GOLD;
                    c.toString();
                    result= new Result(c, member,null,medals,category);
                }
                else if(btnSilver1.isSelected()){
                    medals=Medal.SILVER;
                    c.toString();
                    result= new Result(c, member,null, medals,category);

                }
                else if(btnBronze1.isSelected()){
                    medals=Medal.BRONZE;
                    c.toString();
                    result= new Result(c, member,null, medals,category);
                }
                else{
                    JOptionPane.showMessageDialog(this, "You must select a medal!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                ResultTableModel rmodel= (ResultTableModel) tblResult.getModel();
                if(rmodel.containsMember(result)==true){
                    JOptionPane.showMessageDialog(this, "You already inserted "+result.getMedals().toString()+" for "+result.getMember().getName(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                rmodel.addResult(result);
                tblMembers.clearSelection();
                groupMember.clearSelection();
            }
    }//GEN-LAST:event_btnAddResultMemberActionPerformed

    private void btnBronze1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBronze1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBronze1ActionPerformed

    private void txtCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCompetitionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCompetitionActionPerformed

    private void btnAddResultTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResultTeamActionPerformed
        int selectedRow= tblTeams.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a team!");
                return;
            }
            TeamTableModel model= (TeamTableModel) tblTeams.getModel();
            Team team= model.getTeam(selectedRow);
            Medal medals;
            Result result= new Result();
            if(btnGold2.isSelected()){
                medals=Medal.GOLD;
                result= new Result(c, null,team, medals,team.getCategory());
            }
            else if(btnSilver2.isSelected()){
                medals=Medal.SILVER;
                result= new Result(c, null,team, medals,team.getCategory());
            }
            else if(btnBronze2.isSelected()){
                medals=Medal.BRONZE;
                result= new Result(c, null,team, medals,team.getCategory());
            }
            else{
                JOptionPane.showMessageDialog(this, "You must select a medal!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            ResultTableModel rmodel= (ResultTableModel) tblResult.getModel();
            if(rmodel.containsTeam(result)==true){
                JOptionPane.showMessageDialog(this, "You already inserted "+result.getMedals().toString()+" for "+result.getTeam().getName(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rmodel.addResult(result);
            tblTeams.clearSelection();
            groupTeam.clearSelection();
    }//GEN-LAST:event_btnAddResultTeamActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow= tblResult.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a member!");
                return;
            }
        ResultTableModel rmodel= (ResultTableModel) tblResult.getModel();
        rmodel.delete(selectedRow);
       
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblMembersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMembersMouseClicked
        if(c==null){
           JOptionPane.showMessageDialog(this, "You must select competiton!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int selectedRow= tblMembers.getSelectedRow();
            MemberTableModelSimpler model= (MemberTableModelSimpler) tblMembers.getModel();
            Member member= model.getMember(selectedRow);
            Category cat=member.getCategory();
            cbCategory.setSelectedItem(cat);
        }
    }//GEN-LAST:event_tblMembersMouseClicked

    private void tblTeamsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTeamsMouseClicked
        if(c==null){
           JOptionPane.showMessageDialog(this, "You must select competiton!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblTeamsMouseClicked

    private void tblResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultMouseClicked
        if(c==null){
           JOptionPane.showMessageDialog(this, "You must select competiton!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblResultMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddResultMember;
    private javax.swing.JButton btnAddResultTeam;
    private javax.swing.JRadioButton btnBronze1;
    private javax.swing.JRadioButton btnBronze2;
    private javax.swing.JButton btnChooseCompetition;
    private javax.swing.JButton btnDelete;
    private javax.swing.JRadioButton btnGold1;
    private javax.swing.JRadioButton btnGold2;
    private javax.swing.JButton btnSave;
    private javax.swing.JRadioButton btnSilver1;
    private javax.swing.JRadioButton btnSilver2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTable tblCompetitions;
    private javax.swing.JTable tblMembers;
    private javax.swing.JTable tblResult;
    private javax.swing.JTable tblTeams;
    private javax.swing.JTextField txtCompetition;
    // End of variables declaration//GEN-END:variables

    private void prepareView() throws Exception {
        formatTables();
        loadCategory();
        buttonGroups();
        ImageIcon img = new ImageIcon("logoIcon.png");
        lblPhoto.setIcon(img);
        
    }

    private void formatTables() throws Exception {
        formatTableCompetitions();
        formatTableMembers();
        fromatTableTeams();
        formatTableResult();
    }

    private void formatTableCompetitions() throws Exception {
        List<Competition> competitions= ControllerUI.getInstance().getByQueryCompetition("");
        CompetitionTableModel model= new CompetitionTableModel(competitions);
        tblCompetitions.setModel(model);
    }

    private void formatTableMembers() throws Exception {
        List<Member> members= ControllerUI.getInstance().getByQuery("");
        MemberTableModelSimpler model= new MemberTableModelSimpler(members);
        tblMembers.setModel(model);
    }

    private void fromatTableTeams() throws Exception {
        List<Team> teams= ControllerUI.getInstance().getByQueryTeams("");
        TeamTableModel model= new TeamTableModel(teams);
        tblTeams.setModel(model);
    }

    private void formatTableResult() {
        ResultTableModel model= new ResultTableModel(new ArrayList<Result>());
        tblResult.setModel(model);
    }

    private void buttonGroups() {
        groupMember.add(btnGold1);
        groupMember.add(btnSilver1);
        groupMember.add(btnBronze1);
        groupTeam.add(btnGold2);
        groupTeam.add(btnSilver2);
        groupTeam.add(btnBronze2);
    }

   
    private void updateMedalsMember(Result r, Member m) throws Exception {
        Member member=r.getMember();
        Long medals=member.getMedals()+1;
        Long gold= member.getGoldMedals()+1;
        Long silver=member.getSilverMedals()+1;
        Long bronze= member.getBronzeMedals()+1;
        Medal medal= r.getMedals();
        member.setMedals(medals);
        if(medal.equals(Medal.GOLD)){
            member.setGoldMedals(gold);
        }
        else if(medal.equals(Medal.SILVER)){
            member.setSilverMedals(silver);
        }
        else{
            member.setBronzeMedals(bronze);
        }
        ControllerUI.getInstance().updateMember(m, member);
        MemberTableModelSimpler model=(MemberTableModelSimpler) tblMembers.getModel();
        model.refreshView();
        tblMembers.setModel(model);
    }

    private void updateMedalsTeam(Result r, Team team) throws Exception {
        for(Member m: team.getMembers()){
            Member member=m;
            Long medals=member.getMedals()+1;
            Long gold= member.getGoldMedals()+1;
            Long silver=member.getSilverMedals()+1;
            Long bronze= member.getBronzeMedals()+1;
            Medal medal= r.getMedals();
            member.setMedals(medals);
            if(medal.equals(Medal.GOLD)){
                member.setGoldMedals(gold);
            }
            else if(medal.equals(Medal.SILVER)){
                member.setSilverMedals(silver);
            }
            else{
                member.setBronzeMedals(bronze);
            }
        ControllerUI.getInstance().updateMember(m, member);
        MemberTableModelSimpler model=(MemberTableModelSimpler) tblMembers.getModel();
        model.refreshView();
        tblMembers.setModel(model);
        
        }
    }

    private void refreshView() {
       ResultTableModel model= new ResultTableModel(new ArrayList<Result>());
       tblResult.setModel(model);
       tblCompetitions.setEnabled(true);
       btnChooseCompetition.setEnabled(true);
       txtCompetition.setText(null);
       clearSelection();
       c=null;
       
    }

    private void clearSelection() {
        btnGold1.setSelected(false);
        btnGold2.setSelected(false);
        btnSilver1.setSelected(false);
        btnSilver2.setSelected(false);
        btnBronze1.setSelected(false);
        btnBronze2.setSelected(false);
        cbCategory.setSelectedItem(null);
    }

    private void loadCategory() {
       cbCategory.setModel(new DefaultComboBoxModel(Category.values()));
       cbCategory.setSelectedItem(null);
    }

}