/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.Competition;
import rs.fon.np.application.kkfunakoshi.domain.Medal;
import rs.fon.np.application.kkfunakoshi.domain.Member;
import rs.fon.np.application.kkfunakoshi.domain.Result;
import rs.fon.np.application.kkfunakoshi.validation.ValidationException;
import rs.fon.np.application.kkfunakoshi.validation.Validator;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.ResultTableModel;

/**
 * Predstavlja formu za prikaz svih rezultata.
 * @author Jelena Repac
 */
public class FrmViewResults extends javax.swing.JFrame {

	/**
	 * Takmicenje za koje se prikazuju rezultati
	 */
    private Competition competition;
    /**
     * Clan kluba
     */
    private Member member;
    /**
     * Konstruktor
     * @param competition takmicenje za koje se prikazuju rezultati
     */
    public FrmViewResults(Competition competition) {
        initComponents();
        
        this.competition=competition;
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        setTitle("Results");
        try {
            prepareView();
        } catch (Exception ex) {
            Logger.getLogger(FrmViewResults.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnShow = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        cbCompetition = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtGold = new javax.swing.JTextField();
        txtSilver = new javax.swing.JTextField();
        txtBronze = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMedals = new javax.swing.JTextField();
        btnChange = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tbl);

        btnShow.setText("Show all results");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        jLabel1.setText("Competition name:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbCompetition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Gold medals:");

        jLabel3.setText("Silver medals:");

        jLabel4.setText("Bronze medals:");

        txtGold.setEditable(false);
        txtGold.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtSilver.setEditable(false);
        txtSilver.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtBronze.setEditable(false);
        txtBronze.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText("Total:");

        txtMedals.setEditable(false);
        txtMedals.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnChange.setText("Change result");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnShow, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(btnChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPhoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtGold, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSilver, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBronze, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMedals, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel1))))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnShow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChange))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtGold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSilver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBronze, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMedals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Obradjuje dogadjaj kada se pritisne dugme ShowAllResults.
     * Omogucava prikaz svih rezultata za prethodno izabrano takmicenje.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        try {
            List<Result> results= ControllerUI.getInstance().getByQueryResults("");
            if(results.isEmpty()){
                JOptionPane.showMessageDialog(this, "There's no results!");
                return;
            }
            else{
            JOptionPane.showMessageDialog(this, "System found results!");
            ResultTableModel model=new ResultTableModel(results);
            
            tbl.setModel(model);
            setNumberOfMedals(model);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmViewResults.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnShowActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme Search.
     * Vraca sve rezultate izabranog takmicenja i setuje ih u tabelu rezultata.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Competition c= (Competition) cbCompetition.getSelectedItem();
            if(c==null){
                JOptionPane.showMessageDialog(this, "You must select a competition!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else{
                List<Result> results= ControllerUI.getInstance().getByQueryResults(" WHERE competitionId="+c.getId()+" ORDER BY medal");
                if(results.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found results for "+c.getName());
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find results for "+c.getName(),"Error",JOptionPane.ERROR_MESSAGE);
                }
                
                ResultTableModel model=new ResultTableModel(results);
                tbl.setModel(model);
                txtGold.setText(String.valueOf(model.getGoldMedals()));
                txtSilver.setText(String.valueOf(model.getSilverMedals()));
                txtBronze.setText((String.valueOf(model.getBronzeMedals())));
                txtMedals.setText(String.valueOf(model.getRowCount()));
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmViewResults.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Obradjuje dogadjaj kada se pritisne dugme ChangeResult.
     * Omogucava izmenu rezultata izabranog takmicenja.
     * Otvara formu za azuriranje rezultata.
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        try {
            int selectedRow= tbl.getSelectedRow();
            if(selectedRow==-1){
                return;
            }
            ResultTableModel model= (ResultTableModel) tbl.getModel();
            Result r= model.getResult(selectedRow);
            if(r.getMember().getName()!=null){
                new FrmLoadResult(this,true,r).setVisible(true);
                ResultTableModel rmodel= (ResultTableModel) tbl.getModel();
                rmodel.refreshView();
                setNumberOfMedals(rmodel);
            }
            else{
                new FrmLoadResultTeam(this, true, r).setVisible(true);
                ResultTableModel rmodel= (ResultTableModel) tbl.getModel();
                rmodel.refreshView();
                setNumberOfMedals(rmodel);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmViewResults.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnChangeActionPerformed

   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnShow;
    private javax.swing.JComboBox<String> cbCompetition;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtBronze;
    private javax.swing.JTextField txtGold;
    private javax.swing.JTextField txtMedals;
    private javax.swing.JTextField txtSilver;
    // End of variables declaration//GEN-END:variables
    /**
     * Priprema prikaza forme.
     * Postavlja se slika i rezultati za prosledjeno takmicenje.
     * 
     */
    private void prepareView() throws Exception {
        if(competition==null){
            loadCompetitions();
            formatTable();
        }
        else {
            loadCompetitions();
            List<Result> results= ControllerUI.getInstance().getByQueryResults(" WHERE competitionId="+competition.getId()+" ORDER BY medal");
            formatTableCompetitionMember(results);
        }
        ImageIcon img = new ImageIcon("logoIcon.png");
        lblPhoto.setIcon(img);
    }
    /**
     * Ucitavaju se sva takmicenja iz baze i setuje se ComboBox.
     * @throws Exception Ukoliko se desi greska prilikom ucitavanja takmicenja iz baze
     */
    private void loadCompetitions() throws Exception {
        List<Competition> competitions= ControllerUI.getInstance().getByQueryCompetition("");
        cbCompetition.setModel(new DefaultComboBoxModel(competitions.toArray()));
        cbCompetition.setSelectedItem(null);
    }
    /**
     * Setuje se model za tabelu za prikaz rezultata.
     */
    private void formatTable() {
       ResultTableModel model= new ResultTableModel(new ArrayList<Result>());
       tbl.setModel(model);
    }
    /**
     * Postavlja se broj modelja.
     * @param model za tabelu za prikaz rezultata
     */
    private void setNumberOfMedals(ResultTableModel model) {
        txtGold.setText(String.valueOf(model.getGoldMedals()));
        txtSilver.setText(String.valueOf(model.getSilverMedals()));
        txtBronze.setText((String.valueOf(model.getBronzeMedals())));
        txtMedals.setText(String.valueOf(model.getRowCount()));
    }
    /**
     * Setuje model za tabelu za prikaz svih rezultat koji sadrzi listu svih rezultata iz baze.
     * @param results lista rezultata
     */
    private void formatTableCompetitionMember(List<Result> results) {
        ResultTableModel model= new ResultTableModel(results);
        tbl.setModel(model);
        setNumberOfMedals(model);
    }

   

}
