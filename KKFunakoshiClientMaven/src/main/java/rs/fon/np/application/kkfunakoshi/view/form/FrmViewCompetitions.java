/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.City;
import rs.fon.np.application.kkfunakoshi.domain.Competition;
import rs.fon.np.application.kkfunakoshi.domain.Result;
import rs.fon.np.application.kkfunakoshi.validation.ValidationException;
import rs.fon.np.application.kkfunakoshi.validation.Validator;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.CompetitionTableModel;

/**
 * Forma za prikaz svih takmicenja.
 * @author Jelena Repac
 */
public class FrmViewCompetitions extends javax.swing.JDialog {

	/**
     * Konstruktor, kreira novi prozor FrmViewCompetitions
     * @param parent forma iz koje je pozvana 
     * @param modal odredjuje da li dijalog treba da bude modalan ili ne 
     */
    public FrmViewCompetitions(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        setTitle("Competitions");
        
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
        
        try {
            prepareView();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "System can't load competitions", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCompetition = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cbCity = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnShowCompetitions = new javax.swing.JButton();
        btnShowResults = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        btnDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblCompetition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCompetition.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblCompetition);

        jLabel1.setText("Search by name:");

        jLabel2.setText("Search by city:");

        cbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCityActionPerformed(evt);
            }
        });

        btnShowCompetitions.setText("Show all competitions");
        btnShowCompetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowCompetitionsActionPerformed(evt);
            }
        });

        btnShowResults.setText("Show results");
        btnShowResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowResultsActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnShowCompetitions, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnShowResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(cbCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)))
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnShowResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDetails)))
                .addGap(12, 12, 12)
                .addComponent(btnShowCompetitions)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obradjuje dogadjaj kada korisnik klikne na dugme Show all competitions.
     * Prikazuje sva takmicenja iz baze.
     * 
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnShowCompetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowCompetitionsActionPerformed
        try {
            formatTable();
        } catch (Exception ex) {
            Logger.getLogger(FrmViewCompetitions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnShowCompetitionsActionPerformed

    /**
     * Obradjuje dogadjaj kada korisnik klikne na dugme Shearch.
     * Pretrazuje takmicenje na osnovu unetog naziva i grada u kome je takmicenje odrzano.
     * 
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCityActionPerformed

        try {
            if(txtName.getText().trim()!=null && cbCity.getSelectedItem()==null){
                String query="WHERE c.name='"+txtName.getText()+"'";
                List<Competition> competitions= ControllerUI.getInstance().getByQueryCompetition(query);
                if(competitions.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found competition: "+txtName.getText());
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find competitions by the given value!","Error",JOptionPane.ERROR_MESSAGE);
                }
                CompetitionTableModel model= new CompetitionTableModel(competitions);
                tblCompetition.setModel(model);
                txtName.setText(null);
                return;
            }
            
            else if(txtName.getText().isEmpty() && cbCity.getSelectedItem()!=null){
                City c= (City) cbCity.getSelectedItem();
                String query="WHERE c.cityId="+c.getId();
                List<Competition> competitions=ControllerUI.getInstance().getByQueryCompetition(query);
                if(competitions.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found competitions organized in "+c.getName());
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot find competitions organized in "+c.getName(),"Error",JOptionPane.ERROR_MESSAGE);
                }
                CompetitionTableModel model= new CompetitionTableModel(competitions);
                tblCompetition.setModel(model);
                cbCity.setSelectedItem(null);
                return;
            }
            else{
                City c= (City) cbCity.getSelectedItem();
                String query="WHERE c.name='"+txtName.getText()+"'"+" AND c.cityId="+c.getId();
                List<Competition> competitions=ControllerUI.getInstance().getByQueryCompetition(query);
                if(competitions.size()!=0){
                    JOptionPane.showMessageDialog(this, "The system found "+txtName.getText()+" organized in "+c.getName());
                }else{
                    JOptionPane.showMessageDialog(this, "The system cannot found "+txtName.getText()+" organized in "+c.getName(),"Error",JOptionPane.ERROR_MESSAGE);
                }
                CompetitionTableModel model= new CompetitionTableModel(competitions);
                tblCompetition.setModel(model);
                cbCity.setSelectedItem(null);
                txtName.setText(null);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmViewCompetitions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnSearchCityActionPerformed

    /**
     * Obradjuje dogadjaj kada korisnik klikne na dugme Show results.
     * Prikazuje sve rezultate za izabrano takmicenje.
     * Ukoliko korisnik nije izabrao nijedno takmicenje i ukoliko za izabrano takmicenje nema postignutih rezultata prikazuje se prozor sa porukom o gresci.
     * 
     * 
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnShowResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowResultsActionPerformed
        try {
            int selectedRow= tblCompetition.getSelectedRow();
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "You must select a competition!");
                return;
            }
            CompetitionTableModel model=(CompetitionTableModel) tblCompetition.getModel();
            Competition competition= model.getCompetition(selectedRow);
            List<Result> results= ControllerUI.getInstance().getByQueryResults(" WHERE competitionId="+competition.getId()+" ORDER BY medal");
            if(results.isEmpty()){
                JOptionPane.showMessageDialog(this, "There are no results for selected competition!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else{
                JOptionPane.showMessageDialog(this, "The system find results for selected competition!");
                this.dispose();
                new FrmViewResults(competition).setVisible(true);
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmViewCompetitions.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
    }//GEN-LAST:event_btnShowResultsActionPerformed

    /**
     * Obradjuje dogadjaj kada korisnik klikne na dugme Details.
     * Prikazuje izabrano takmicenje u novoj formi. 
     * Ukoliko korisnik nije izabrao nijedno takmicenje prikazuje se prozor sa porukom o gresci.
     * 
     * 
     * @param evt dogadjaj koji pokrece ovu metodu
     */
    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
       int selectedRow= tblCompetition.getSelectedRow();
       if(selectedRow<0){
           JOptionPane.showMessageDialog(this, "You must select a competition!");
           return;
       }
       else{
           try {
               CompetitionTableModel model= (CompetitionTableModel) tblCompetition.getModel();
               Competition competition= model.getCompetition(selectedRow);
               JOptionPane.showMessageDialog(this, "System has successfully loaded selected competition!");
               new FrmLoadCompetition((Frame) this.getParent(), true,competition).setVisible(true);
               
           } catch (Exception ex) {
              JOptionPane.showMessageDialog(this, "System can't load selected competition!","Error",JOptionPane.ERROR_MESSAGE);
           }
       }
    }//GEN-LAST:event_btnDetailsActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowCompetitions;
    private javax.swing.JButton btnShowResults;
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTable tblCompetition;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
    /**
     * Priprema prikaz forme.
     * Ucitava gradove iz sistema i postavlja sliku.
     * 
     * @throws Exception Ukoliko se desi greska pri ucitavanju gradova iz sistema.
     */
    private void prepareView() throws Exception {
        CompetitionTableModel model= new CompetitionTableModel(new ArrayList<Competition>());
        tblCompetition.setModel(model);
        
        loadCities();
        ImageIcon img = new ImageIcon("logoIcon.png");
        lblPhoto.setIcon(img);
       
    }
    /**
     * Ucitava gradove iz baze i postavlja ih u formu, JComboBox.
     * 
     * @throws Exception Ukoliko dodje do greske prilikom citanja gradova iz baze
     */
    private void loadCities() throws Exception {
       List<City> cities=ControllerUI.getInstance().getCities();
       cbCity.setModel(new DefaultComboBoxModel(cities.toArray()));
       cbCity.setSelectedItem(null);
    }

    /**
     * Formatira tabelu takmicenja.
     * Ukoliko lista takmicenja preuzeta iz baze ne sadrzi nijedno takmicenje sistem prikazuje prozor sa porukom o gresci.
     * U suprotnom, prikazuje prozor sa porukom o uspesnom ucitavanju takmicenja i setuje model tabele sa listom takmicenja.
     * @throws Exception koliko dodje do greske prilikom citanja takmicenja iz baze
     */
    private void formatTable() throws Exception {
        List<Competition> competitions=loadCompetitions();
        if(competitions.size()!=0){
            JOptionPane.showMessageDialog(this, "The system found competitions!");
            CompetitionTableModel model= new CompetitionTableModel(competitions);
            tblCompetition.setModel(model);
        }else{
            JOptionPane.showMessageDialog(this, "The system cannot find competitions !","Error",JOptionPane.ERROR_MESSAGE);
            CompetitionTableModel model= new CompetitionTableModel(new ArrayList<Competition>());
            tblCompetition.setModel(model);
        }
        
    }

    /**
     * Vraca listu svih takmicenja iz baze. 
     * @return lista takmicenja
     * @throws Exception Ukoliko dodje do greske prilikom citanja takmicenja iz baze.
     */
    private List<Competition> loadCompetitions() throws Exception {
        List<Competition> competitions= ControllerUI.getInstance().getByQueryCompetition("");
        return competitions;
    }
    /**
     *  
     * Vrsi validaciju korisnickog unosa za naziv takmicenja.
     * Koristi Validator klasu za proveru i generisanje odgovarajuce poruke o gresci.
     * 
     * @throws ValidationException Ukoliko postoji neka greska u unosu
     *
     */
    private void validateInput() throws ValidationException {
        Validator.startValidation().validateNotNullOrEmpty(txtName.getText(), "Insert value for search!").throwIfInvalide();
    }
}
