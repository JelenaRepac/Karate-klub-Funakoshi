/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.fon.np.application.kkfunakoshi.view.form;

import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import rs.fon.np.application.kkfunakoshi.controller.ControllerUI;
import rs.fon.np.application.kkfunakoshi.domain.Belt;
import rs.fon.np.application.kkfunakoshi.domain.Category;
import rs.fon.np.application.kkfunakoshi.domain.City;
import rs.fon.np.application.kkfunakoshi.domain.Discipline;
import rs.fon.np.application.kkfunakoshi.domain.Gender;
import rs.fon.np.application.kkfunakoshi.domain.Member;
import rs.fon.np.application.kkfunakoshi.domain.MembershipFee;
import rs.fon.np.application.kkfunakoshi.validation.ValidationException;
import rs.fon.np.application.kkfunakoshi.validation.Validator;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MemberTableModel;
import rs.fon.np.application.kkfunakoshi.view.form.component.table.MembershipFeeTableModel;

/**
 *
 * @author Jeks
 */
public class FrmLoadMember extends javax.swing.JDialog {

    /**
     * Creates new form FrmLoadMember
     */
    
    private Member member;
    private JTable table;
    private List<MembershipFee> newFees;
    SimpleDateFormat format= new SimpleDateFormat("yyyy-MM-dd");
    
    public FrmLoadMember(java.awt.Frame parent, boolean modal, Member m) {
        super(parent, modal);
        initComponents();
        
        member = m;
        newFees=new ArrayList<>();
        
        this.setResizable(false);
        setTitle("Details about member");
        this.setLocationRelativeTo(null);
        
        try {
            prepareView();
            JOptionPane.showMessageDialog(this, "System has load member.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "System can't load member", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    

    public void setTableMember(JTable t) {
        table=t;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMemberId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblLastname = new javax.swing.JLabel();
        lblBirthday = new javax.swing.JLabel();
        lblMothersname = new javax.swing.JLabel();
        lblFathersName1 = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblAdress = new javax.swing.JLabel();
        lblBelt = new javax.swing.JLabel();
        lblDiscipline = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        lblMedals = new javax.swing.JLabel();
        txtMedals = new javax.swing.JTextField();
        cbCategory = new javax.swing.JComboBox<>();
        cbDiscipline = new javax.swing.JComboBox<>();
        cbBelt = new javax.swing.JComboBox<>();
        txtAdress = new javax.swing.JTextField();
        cbCity = new javax.swing.JComboBox<>();
        txtFathersName = new javax.swing.JTextField();
        txtMothersname = new javax.swing.JTextField();
        txtDateOfbirth = new javax.swing.JTextField();
        txtMemberLastname = new javax.swing.JTextField();
        txtMemberName = new javax.swing.JTextField();
        txtMemberId = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jPanelTbl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMembershipFee = new javax.swing.JTable();
        btnChange = new javax.swing.JButton();
        jPanelMF = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        btnAddMembershipFee = new javax.swing.JButton();
        lblDateMembershipError = new javax.swing.JLabel();
        lblAmountError = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        cbGender = new javax.swing.JComboBox<>();
        lblName1 = new javax.swing.JLabel();
        lblMedals1 = new javax.swing.JLabel();
        lblMedals2 = new javax.swing.JLabel();
        txtGold = new javax.swing.JTextField();
        txtSilver = new javax.swing.JTextField();
        lblMedals3 = new javax.swing.JLabel();
        txtBronze = new javax.swing.JTextField();
        lblDebt = new javax.swing.JLabel();
        txtTotalDebt = new javax.swing.JTextField();
        lblDebt1 = new javax.swing.JLabel();
        txtMembership = new javax.swing.JTextField();
        lblNameError = new javax.swing.JLabel();
        lblLastnameError = new javax.swing.JLabel();
        lblDateError = new javax.swing.JLabel();
        lblMothersNameError = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblFathersNameError = new javax.swing.JLabel();
        lblPhoto = new javax.swing.JLabel();
        lblPhoto1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblMemberId.setText("Id:");
        lblMemberId.setPreferredSize(new java.awt.Dimension(35, 16));

        lblName.setText("Name:");

        lblLastname.setText("Lastname:");

        lblBirthday.setText("Date of birth:");

        lblMothersname.setText("Mothers name:");

        lblFathersName1.setText("Fathers name:");

        lblCity.setText("City");

        lblAdress.setText("Adress:");

        lblBelt.setText("Belt: ");

        lblDiscipline.setText("Discipline:");

        lblCategory.setText("Category:");

        lblMedals.setText("Medals:");

        txtFathersName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFathersNameKeyTyped(evt);
            }
        });

        txtMothersname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMothersnameKeyTyped(evt);
            }
        });

        txtDateOfbirth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDateOfbirthKeyTyped(evt);
            }
        });

        txtMemberLastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMemberLastnameKeyTyped(evt);
            }
        });

        txtMemberName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMemberNameKeyTyped(evt);
            }
        });

        txtMemberId.setEditable(false);
        txtMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIdActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete member");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jPanelTbl.setBorder(javax.swing.BorderFactory.createTitledBorder("Membership fees"));

        tblMembershipFee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMembershipFee.setEnabled(false);
        tblMembershipFee.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblMembershipFee);

        javax.swing.GroupLayout jPanelTblLayout = new javax.swing.GroupLayout(jPanelTbl);
        jPanelTbl.setLayout(jPanelTblLayout);
        jPanelTblLayout.setHorizontalGroup(
            jPanelTblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTblLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTblLayout.setVerticalGroup(
            jPanelTblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTblLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        btnChange.setText("Change informations");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        jPanelMF.setBorder(javax.swing.BorderFactory.createTitledBorder("Membership Fee"));

        jLabel5.setText("Date:");

        jLabel6.setText("Amount:");

        txtDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDateKeyTyped(evt);
            }
        });

        txtAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmountKeyTyped(evt);
            }
        });

        btnAddMembershipFee.setText("Add");
        btnAddMembershipFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMembershipFeeActionPerformed(evt);
            }
        });

        lblDateMembershipError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateMembershipError.setText("Error message date ");

        lblAmountError.setForeground(new java.awt.Color(255, 0, 0));
        lblAmountError.setText("Error amount");

        javax.swing.GroupLayout jPanelMFLayout = new javax.swing.GroupLayout(jPanelMF);
        jPanelMF.setLayout(jPanelMFLayout);
        jPanelMFLayout.setHorizontalGroup(
            jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMFLayout.createSequentialGroup()
                .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMFLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelMFLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addGap(76, 76, 76)
                .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblAmountError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAmount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                    .addGroup(jPanelMFLayout.createSequentialGroup()
                        .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblDateMembershipError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddMembershipFee)))
                .addGap(35, 35, 35))
        );

        jPanelMFLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel5, jLabel6});

        jPanelMFLayout.setVerticalGroup(
            jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMFLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddMembershipFee))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(lblDateMembershipError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanelMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAmountError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnUpdate.setText("Update member");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblName1.setText("Gender:");

        lblMedals1.setText("Gold medals:");

        lblMedals2.setText("Silver medals:");

        lblMedals3.setText("Bronze medals:");

        lblDebt.setText("Total debt:");

        txtTotalDebt.setEditable(false);
        txtTotalDebt.setForeground(new java.awt.Color(255, 0, 0));

        lblDebt1.setText("Date od membership:");

        txtMembership.setEditable(false);

        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("Error message name");

        lblLastnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLastnameError.setText("Error message lastname");

        lblDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateError.setText("Error message date of birth");

        lblMothersNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblMothersNameError.setText("Error message mothers name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblFathersNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFathersNameError.setText("Error message fathers name");

        lblPhoto.setPreferredSize(new java.awt.Dimension(35, 35));

        lblPhoto1.setPreferredSize(new java.awt.Dimension(35, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMothersname)
                            .addComponent(lblFathersName1)
                            .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBelt, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiscipline)
                            .addComponent(lblCategory)
                            .addComponent(lblMedals, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMedals1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMedals2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMedals3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(cbGender, javax.swing.GroupLayout.Alignment.LEADING, 0, 242, Short.MAX_VALUE)
                                        .addComponent(txtMemberLastname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtMedals, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(cbCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, 242, Short.MAX_VALUE)
                                        .addComponent(cbDiscipline, javax.swing.GroupLayout.Alignment.LEADING, 0, 242, Short.MAX_VALUE)
                                        .addComponent(cbBelt, javax.swing.GroupLayout.Alignment.LEADING, 0, 242, Short.MAX_VALUE)
                                        .addComponent(txtAdress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtDateOfbirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtMothersname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtFathersName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(cbCity, javax.swing.GroupLayout.Alignment.LEADING, 0, 242, Short.MAX_VALUE)
                                        .addComponent(txtMemberId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                                    .addComponent(txtGold, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                                .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblDateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblLastnameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtBronze, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSilver, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMothersNameError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFathersNameError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnChange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelMF, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblDebt1)
                            .addGap(18, 18, 18)
                            .addComponent(txtMembership, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDebt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotalDebt, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelTbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(569, 569, 569)
                    .addComponent(lblPhoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(569, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAdress, lblBelt, lblBirthday, lblCategory, lblCity, lblDiscipline, lblFathersName1, lblLastname, lblMedals, lblMedals1, lblMedals2, lblMedals3, lblMemberId, lblMothersname, lblName, lblName1});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbBelt, cbCategory, cbCity, cbDiscipline, cbGender, txtAdress, txtBronze, txtDateOfbirth, txtFathersName, txtGold, txtMedals, txtMemberId, txtMemberLastname, txtMemberName, txtMothersname, txtSilver});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtMemberId)
                                        .addComponent(lblDebt1)
                                        .addComponent(txtMembership, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblMemberId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName)
                                    .addComponent(txtMemberName))
                                .addGap(8, 8, 8)
                                .addComponent(lblNameError)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLastname)
                                    .addComponent(txtMemberLastname))
                                .addGap(8, 8, 8)
                                .addComponent(lblLastnameError)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName1)
                                    .addComponent(cbGender))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDateOfbirth)
                                    .addComponent(lblBirthday))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDateError)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMothersname)
                                    .addComponent(lblMothersname))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMothersNameError)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFathersName1)
                                    .addComponent(txtFathersName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFathersNameError)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCity)
                                    .addComponent(cbCity))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAdress)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanelTbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtTotalDebt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDebt))))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblBelt)
                                    .addComponent(cbBelt))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDiscipline)
                                    .addComponent(cbDiscipline))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbCategory)
                                    .addComponent(lblCategory))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMedals)
                                    .addComponent(txtMedals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMedals1)
                                    .addComponent(txtGold))
                                .addGap(20, 20, 20))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelMF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedals2)
                            .addComponent(txtSilver)
                            .addComponent(btnChange)
                            .addComponent(btnUpdate))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedals3)
                            .addComponent(txtBronze)
                            .addComponent(btnDelete))))
                .addGap(30, 30, 30))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(376, 376, 376)
                    .addComponent(lblPhoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(376, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIdActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int answer=JOptionPane.showConfirmDialog(this, "Do you realy want to delete member?");
            if(answer==0){
                ControllerUI.getInstance().deleteMember(member);
                ((MemberTableModel) table.getModel()).deleteMember(member);
                JOptionPane.showMessageDialog(this, "System deleted member!");
                this.dispose();
            }
            else{
                return;
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
       

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddMembershipFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMembershipFeeActionPerformed
        try {
                validateMembershipFee();
                MembershipFee membershipFee= new MembershipFee();
                MembershipFeeTableModel model= (MembershipFeeTableModel) tblMembershipFee.getModel();

                String am= txtAmount.getText().trim();
                Double amount=Double.parseDouble(am);
                String dateMf= txtDate.getText().trim();
                Date date= format.parse(dateMf);
                Date currentDate= new Date();

                if(date.after(currentDate)){
                    JOptionPane.showMessageDialog(this, "Date can not be after current date!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else if(date.before(member.getDateOfMembership())){
                    JOptionPane.showMessageDialog(this, "Date can not be before date of membership!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                membershipFee.setAmount(amount);
                membershipFee.setDate(date);
                membershipFee.setMember(member);

                if(!exists(membershipFee,model)){
                    newFees.add(membershipFee);
                    model.addMembershipFee(membershipFee);
                    txtDate.setText(null);
                    totalDebt();
                }
                else{
                    JOptionPane.showMessageDialog(this, "Membership fee for that month is paid!", "Error", JOptionPane.ERROR_MESSAGE);
                }
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
         catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format!", "Error", JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_btnAddMembershipFeeActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        btnUpdate.setVisible(true);
        jPanelMF.setVisible(true);
        btnDelete.setVisible(false);
        txtAmount.setText("3000.00");
        enableFields();
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            validateInput();
            Member newMember= new Member();
            
            String name=txtMemberName.getText().trim();
            String lastname=txtMemberLastname.getText().trim();
            String fathersName=txtFathersName.getText().trim();
            String mothersName=txtMothersname.getText().trim();
            String dateB= txtDateOfbirth.getText().trim();
            Date birthday=format.parse(dateB);
            Date currentDate= new Date();
            
            if(birthday.after(currentDate)){
                JOptionPane.showMessageDialog(this, "Date of birth can not be after current date!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String adress=txtAdress.getText().trim();
            String medals= txtMedals.getText();
            Belt belt= (Belt) cbBelt.getSelectedItem();
            Discipline discipline=(Discipline) cbDiscipline.getSelectedItem();
            Category category=(Category) cbCategory.getSelectedItem();
            City city= (City) cbCity.getSelectedItem();
            Gender gender=(Gender) cbGender.getSelectedItem();
            Long gold= Long.parseLong(txtGold.getText().trim());
            Long silver= Long.parseLong(txtSilver.getText().trim());
            Long bronze= Long.parseLong(txtBronze.getText().trim());
            Double totalDebt= Double.parseDouble(txtTotalDebt.getText().trim());
            
            newMember= new Member(member.getMemberID(),name, lastname,gender, birthday, mothersName,
                    fathersName, city, belt, Long.parseLong(medals), discipline, category,
                    adress, gold,silver,bronze,newFees,member.getDateOfMembership(),totalDebt);
            
            ControllerUI.getInstance().updateMember(member,newMember);
            JOptionPane.showMessageDialog(this, "You successfully updated member!");
            
            this.dispose();
            newFees= new ArrayList<>();
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            
            JOptionPane.showMessageDialog(this, "Тhe system can't save member!","Error",JOptionPane.ERROR_MESSAGE);
        }
            
            
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtMemberNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemberNameKeyTyped
        if(txtMemberName.getText().length()<2){
            lblNameError.setText("The member name must contain at least 2 letters");
        }
        else{
        lblNameError.setText(null);
        }
    }//GEN-LAST:event_txtMemberNameKeyTyped

    private void txtMemberLastnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemberLastnameKeyTyped
        if(txtMemberLastname.getText().length()<2){
            lblLastnameError.setText("The member lastname must contain at least 2 letters");
        }
        else{
        lblLastnameError.setText(null);
        }
    }//GEN-LAST:event_txtMemberLastnameKeyTyped

    private void txtDateOfbirthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateOfbirthKeyTyped
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.parse(txtDateOfbirth.getText());
            lblDateError.setText(null);
        } catch (ParseException ex) {
            lblDateError.setText("Date must be in format yyyy-MM-dd!");
        }
    }//GEN-LAST:event_txtDateOfbirthKeyTyped

    private void txtMothersnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMothersnameKeyTyped
         if(txtMothersname.getText().length()<2){
            lblMothersNameError.setText("The mothers name must contain at least 2 letters");
        }
        else{
        lblMothersNameError.setText(null);
        }
    }//GEN-LAST:event_txtMothersnameKeyTyped

    private void txtFathersNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFathersNameKeyTyped
        if(txtFathersName.getText().length()<2){
            lblFathersNameError.setText("The fathers name must contain at least 2 letters");
        }else{
        lblFathersNameError.setText(null);
        }
    }//GEN-LAST:event_txtFathersNameKeyTyped

    private void txtDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateKeyTyped
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.parse(txtDate.getText());
            lblDateMembershipError.setText(null);
        } catch (ParseException ex) {
            lblDateMembershipError.setText("Date must be in format yyyy-MM-dd!");
        }
    }//GEN-LAST:event_txtDateKeyTyped

    private void txtAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyTyped
        if(txtAmount.getText().contains("-")){
            lblAmountError.setText("Amount of membership fee can't be zero or less than zero!");
        }
        else{
            lblAmountError.setText(null);
        }
    }//GEN-LAST:event_txtAmountKeyTyped

   

    private void prepareView() throws Exception {
       load();
       setValues();
       disableFields();
        ImageIcon img = new ImageIcon("logoIcon.png");
        lblPhoto.setIcon(img);
       loadCities();
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMembershipFee;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Object> cbBelt;
    private javax.swing.JComboBox<Object> cbCategory;
    private javax.swing.JComboBox<Object> cbCity;
    private javax.swing.JComboBox<Object> cbDiscipline;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelMF;
    private javax.swing.JPanel jPanelTbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAdress;
    private javax.swing.JLabel lblAmountError;
    private javax.swing.JLabel lblBelt;
    private javax.swing.JLabel lblBirthday;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JLabel lblDateMembershipError;
    private javax.swing.JLabel lblDebt;
    private javax.swing.JLabel lblDebt1;
    private javax.swing.JLabel lblDiscipline;
    private javax.swing.JLabel lblFathersName1;
    private javax.swing.JLabel lblFathersNameError;
    private javax.swing.JLabel lblLastname;
    private javax.swing.JLabel lblLastnameError;
    private javax.swing.JLabel lblMedals;
    private javax.swing.JLabel lblMedals1;
    private javax.swing.JLabel lblMedals2;
    private javax.swing.JLabel lblMedals3;
    private javax.swing.JLabel lblMemberId;
    private javax.swing.JLabel lblMothersNameError;
    private javax.swing.JLabel lblMothersname;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblPhoto1;
    private javax.swing.JTable tblMembershipFee;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBronze;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDateOfbirth;
    private javax.swing.JTextField txtFathersName;
    private javax.swing.JTextField txtGold;
    private javax.swing.JTextField txtMedals;
    private javax.swing.JTextField txtMemberId;
    private javax.swing.JTextField txtMemberLastname;
    private javax.swing.JTextField txtMemberName;
    private javax.swing.JTextField txtMembership;
    private javax.swing.JTextField txtMothersname;
    private javax.swing.JTextField txtSilver;
    private javax.swing.JTextField txtTotalDebt;
    // End of variables declaration//GEN-END:variables

    private void disableFields() {
       txtMemberName.setEditable(false);
       txtMothersname.setEditable(false);
       txtFathersName.setEditable(false);
       txtMemberLastname.setEditable(false);
       txtAdress.setEditable(false);
       txtDateOfbirth.setEditable(false);
       txtMedals.setEditable(false);
       txtMemberId.setEditable(false);
       txtGold.setEditable(false);
       txtSilver.setEditable(false);
       txtBronze.setEditable(false);
       txtTotalDebt.setEditable(false);
       tblMembershipFee.setCellSelectionEnabled(false);
       tblMembershipFee.setEnabled(false);
       
    }

    private void setValues() {
        
        txtMemberName.setText(member.getName());
        txtMothersname.setText(member.getMothersName());
        txtMemberLastname.setText(member.getLastname());
        txtFathersName.setText(member.getFathersName());
        txtAdress.setText(member.getAdress());
        txtDateOfbirth.setText(format.format(member.getBirthday()));
        txtMedals.setText(member.getMedals().toString());
        txtMemberId.setText(member.getMemberID().toString());
        txtMembership.setText(member.getDateOfMembership().toString());
        
        cbBelt.setSelectedItem(member.getBelt());
        cbCategory.setSelectedItem(member.getCategory());
        cbDiscipline.setSelectedItem(member.getDiscipline());
        cbCity.setSelectedItem(member.getCity());
        cbGender.setSelectedItem(member.getGender());
        txtGold.setText(member.getGoldMedals().toString());
        txtSilver.setText(member.getSilverMedals().toString());
        txtBronze.setText(member.getBronzeMedals().toString());
        
        
        lblNameError.setText(null);
        lblLastnameError.setText(null);
        lblMothersNameError.setText(null);
        lblFathersNameError.setText(null);
        lblDateMembershipError.setText(null);
        lblAmountError.setText(null);
        lblDateError.setText(null);
        
        jPanelMF.setVisible(false);
        btnUpdate.setVisible(false);
        formatTable();
        totalDebt();
        
   }

    private void loadCities() throws Exception {
       List<City> cities= ControllerUI.getInstance().getCities();
       cbCity.setModel(new DefaultComboBoxModel(cities.toArray()));
    }

    private void formatTable() {
        List<MembershipFee> membershipFees=member.getMembershipFee();
        MembershipFeeTableModel model= new MembershipFeeTableModel(membershipFees);
        tblMembershipFee.setModel(model);
    }


    private void enableFields() {
       txtMemberName.setEditable(true);
       txtMothersname.setEditable(true);
       txtFathersName.setEditable(true);
       txtMemberLastname.setEditable(true);
       txtAdress.setEditable(true);
       txtDateOfbirth.setEditable(true);
       txtMedals.setEditable(true);
       txtGold.setEditable(true);
       txtSilver.setEditable(true);
       txtBronze.setEditable(true);
       cbBelt.setEnabled(true);
       cbCategory.setEnabled(true);
       cbCity.setEnabled(true);
       cbDiscipline.setEnabled(true);
       cbGender.setEnabled(true);
      
    }

    private void totalDebt() {
        int months=0;
        Date dateOfMembership= member.getDateOfMembership();
        //MESEC UCLANJENJA
        String[] dateMember= dateOfMembership.toString().split("-");
        int monthMembership= Integer.parseInt(dateMember[1]);
        int yearMembership= Integer.parseInt(dateMember[0]);
        
        //trenutni mesec
        Date current= new Date();
        Date currentDate= new java.sql.Date(current.getTime());
        String[] dateCurrent= currentDate.toString().split("-");
        int currentMonth= Integer.parseInt(dateCurrent[1]);
        int currentYear= Integer.parseInt(dateCurrent[0]);
        
        MembershipFeeTableModel model= (MembershipFeeTableModel) tblMembershipFee.getModel();
        List<MembershipFee> mfees=model.getMembershipFees();
        
        
        if(yearMembership==currentYear){
            String meseci="";
            if(monthMembership<=currentMonth){
                //uzimamo sve one mesece za koje je clanarina placena
              for(MembershipFee mf:mfees){
                    Date membership=mf.getDate();
                    Date dateMembership=new java.sql.Date(membership.getTime());
                    String[] membershipFee= dateMembership.toString().split("-");
                    int m= Integer.parseInt(membershipFee[1]);
                    meseci=meseci+m+"-";
              }
            }

            for(int i=currentMonth;i>=monthMembership;i--){
                  if(!meseci.contains(String.valueOf(i))){
                      months++;
                  }
            }
        }
        //u slucaju da godina uclanjenja nije ista kao trenutna godina
        else{
            String meseci="";
           
              for(MembershipFee mf:member.getMembershipFee()){
                    Date membership=mf.getDate();
                    Date dateMembership=new java.sql.Date(membership.getTime());
                    String[] membershipFee= dateMembership.toString().split("-");
                    
                    int m= Integer.parseInt(membershipFee[1]);
                    meseci=meseci+m+"-";
              }
            
            for(int i=12;i>=monthMembership;i--){
                  if(!meseci.contains(String.valueOf(i))){
                      months++;
                    }
            }
            for(int i=1; i<=currentMonth;i++){
                if(!meseci.contains("-"+String.valueOf(i)+"-")){
                    months++;
                }
                 
            }
            System.out.println(months);
            if(meseci.equals("")){
                if(currentMonth==monthMembership){
                    months=13;
                }
                else{
                    months=12-monthMembership+currentMonth;
                }
            }
        }
        if(months<0){
            txtTotalDebt.setText((-months)*3000+"");
        }
        else{
             txtTotalDebt.setText(months*3000+"");
        }
        if(months==0){
            txtTotalDebt.setForeground(Color.BLACK);
            txtTotalDebt.setText("0");
        }
      }

    private boolean exists(MembershipFee membershipFee, MembershipFeeTableModel model) {
        String[] date= format.format(membershipFee.getDate()).split("-");
        int monthOfPaying= Integer.parseInt(date[1]);
        
        for(MembershipFee mf: model.getMembershipFees()){
            String[] d=format.format(mf.getDate()).split("-");
            int month=Integer.parseInt(d[1]);
            if(mf.getDate().equals(membershipFee.getDate()) || month==monthOfPaying ){
                return true;
            }
        }
        return false;
    }

  
    private void load() {
        cbBelt.setModel(new DefaultComboBoxModel(Belt.values()));
        cbBelt.setSelectedItem(null);
        cbCategory.setModel(new DefaultComboBoxModel(Category.values()));
        cbCategory.setSelectedItem(null);
        cbDiscipline.setModel(new DefaultComboBoxModel(Discipline.values()));
        cbDiscipline.setSelectedItem(null);
        cbGender.setModel(new DefaultComboBoxModel(Gender.values()));
        cbGender.setSelectedItem(null);
        
        cbBelt.setEnabled(false);
        cbCategory.setEnabled(false);
        cbCity.setEnabled(false);
        cbDiscipline.setEnabled(false);
        cbGender.setEnabled(false);
    }

    private void validateMembershipFee() throws ValidationException {
      Validator.startValidation().validateNotNullOrEmpty(txtAmount.getText(), "Amount can't be null!").
                validateValueIsDate(txtDate.getText() ,"yyyy-MM-dd", "Date must be in the format yyyy-MM-dd").
              validateNumberNotNegative(txtAmount.getText(), "Amount can't be zero or lest then zero!").throwIfInvalide();
    }

    private void validateInput() throws ValidationException {
        
        Validator.startValidation().validateNotNullOrEmpty(txtMemberName.getText(), "You didn't insert member's name!").
               validateNotNullOrEmpty(txtMemberLastname.getText(), "You didn't insert member's lastname!").
               validateNotNullOrEmpty(txtAdress.getText(), "You didn't insert member's adress!").
               validateNotNullOrEmpty(txtMothersname.getText(), "You didn't insert mothers name!").
               validateNotNullOrEmpty(txtFathersName.getText(), "You didn't insert fathers name!").
               validateValueIsDate(txtDateOfbirth.getText(), "yyyy-MM-dd", "Date must be in the format yyyy-MM-dd!").
               validateNotNull(cbBelt.getSelectedItem(),"You didn't choose a belt!").
               validateNotNull(cbCategory.getSelectedItem(),"You didn't choose a category!").
               validateNotNull(cbCity.getSelectedItem(),"You didn't choose a city!").
               validateNotNull(cbDiscipline.getSelectedItem(),"You didn't choose a discipline!").
               validateNotNull(cbGender.getSelectedItem(),"You didn't choose a gender!").throwIfInvalide();
    
    }
}
